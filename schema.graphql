type Token @entity {
  id: ID!
  name: String
  symbol: String
  decimals: String
  version: String
  url: String
  description: String
  twitter: String
  github: String
  discord: String
  avatar: String
  globalNamespace: String
  tokenSupply: String
  circulatingSupply: String
  forum: String
  governance: String
  snapshot: String
  abi: String
  git: String
  farcaster: String
  farcasterChannel: String
  governanceContract: String
  notice: String
  dweb: String
  isChainWithChainID: String
  isChainWithCoinType: String
  tokenAddresses: [TokenAddress!]! @derivedFrom(field: "tokenId")
  timestamp: BigInt
}

type TokenAddress @entity {
  id: ID!
  tokenId: Token
  address: String
  nonEVMAddress: String
  coinTypeID: String
  chainID: Chain
  chainVersion: String
  deprecated: Boolean
}

type Chain @entity {
  id: ID!
  tokens: [TokenAddress!]! @derivedFrom(field: "chainID")
  timestamp: BigInt
}

type User @entity {
  id: ID!
  name: String
  address: String
  email: String
  discord: String
  twitter: String
  telegram: String
  github: String
}

type List @entity {
  id: ID!
  name: String
  description: String
  owner: String
  autopublish: Boolean
}

type ListMembership @entity {
  id: ID!
  listID: [List!]! @derivedFrom(field: "id")
  tokenID: [Token!]! @derivedFrom(field: "tokenID")
}

type ListOwnership @entity {
  id: String!
  listID: [List!]! @derivedFrom(field: "id")
  userID: [User!]! @derivedFrom(from: "id")
}

type Validation @entity {
  id: ID!
  tokenID: [Token!]! @derivedFrom(field: "tokenID")
  addressID: [TokenAddress!]! @derivedFrom(field: "address")
  userID: [User!]! @derivedFrom(from: "id")
  datakey: String
  assertion: String
  data: String
  farcasterFID: String
  farcasterReputationScoreV1: String
  farcasterCustodyAddress: String
  farcasterVerifiedAddress: String
  rewardTransactionHash: String
}
